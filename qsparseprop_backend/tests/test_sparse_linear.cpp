#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "src/utils/sparse_utils.h"
#include "src/sparse/qsparse_linear.h"

TEST(Test_Sparse, QuantizeSparseLinearForward1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale = 0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    float O[20] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f
    };
    // O = (XW)^T
    float expected_O[20] = {
        -0.4430, -0.4084, 0.1904, -0.1973,
        0.3296, 0.6115, -0.3631, -0.4491,
        -0.2668, 0.0608,  0.2457, -0.2293,
        0.6558, -0.1496, -0.6040, 0.5637,
        0.0032, 0.0125, -0.0013, 0.0010
    };

    sparse::quantized_sparse_linear_vectorized_forward(B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale, O);

    for (int i = 0; i < 20; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearForward2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32, 30, -21, -128, -119, 127, 13, -20,
        -74, 88, 113, 54, -98, 33, -94, 97,
        -48, 80, 11, -128, -99, -106, -3, -91,
        -24, -80, -10, -0, 96, -78, 16, 15,
        -16, 90, -128, -72, -88, -110, -19, -101,
        89, 98, -16, -112, -65, 124, -111, 23,
        127, 98, -15, 31, 99, 88, -127, 110,
        123, -68, 85, -56, 97, 40, 101, -8,

        83, -32, -29, -113, 54, -79, 37, -128,
        34, -80, 55, 5, 113, -128, 112, -18,
        -86, -13, -64, 3, 46, -16, 67, 112,
        -47, 56, -54, 86, 98, 3, -51, 116,
        -10, -73, 16, -58, 25, -54, 94, 75,
        -54, 112, 45, 90, 32, 51, -45, 127,
        127, 43, -121, 43, 62, -128, -117, 47,
        -53, -59, -23, 57, -5, -86, 32, -37,

        25, -128, -16, 40, -41, -100, -46, 44,
        24, 127, 99, -96, -97, -43, -101, -11,
        -88, 68, -96, -41, 42, -25, 12, -125,
        -74, 50, 51, -79, -128, 123, 76, 80,
        119, 21, 106, -62, -79, -21, 3, 47,
        -77, 19, -76, -10, 56, -127, 61, -103,
        25, 11, -25, 127, 12, -15, -78, 62,
        127, -124, -86, -72, -20, 29, -12, -125,

        -83, -30, -106, 89, 85, -120, -2, -128,
        127, -112, -56, 127, -29, -66, -35, -128,
        -1, 17, 1, -128, -127, 126, 56, -11,
        77, 21, -128, 104, 88, -47, 76, -128,
        3, 14, 107, 92, -102, -115, 34, 105,
        127, 94, -95, 5, 109, -57, 127, 57,
        60, -82, 37, -116, -117, -108, -40, -87,
        -128, -116, -81, 106, 123, -23, -82, 52
    };
    float X_scale = 0.0070;//0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    float O[320];
    for (int i = 0; i < 320; i++) {
        O[i] = 0.0f;
    }
    float expected_O[320] = {
        3.0938e-01, -1.1928e-01, -1.0810e-01, -4.2121e-01,  2.0129e-01,
        -2.9447e-01,  1.3792e-01, -4.7712e-01,  1.2674e-01, -2.9820e-01,
        2.0501e-01,  1.8638e-02,  4.2121e-01, -4.7712e-01,  4.1748e-01,
        -6.7095e-02, -3.2056e-01, -4.8457e-02, -2.3856e-01,  1.1183e-02,
        1.7146e-01, -5.9640e-02,  2.4974e-01,  4.1748e-01, -1.7519e-01,
        2.0874e-01, -2.0129e-01,  3.2056e-01,  3.6529e-01,  1.1183e-02,
        -1.9010e-01,  4.3239e-01, -3.7275e-02, -2.7211e-01,  5.9640e-02,
        -2.1620e-01,  9.3187e-02, -2.0129e-01,  3.5039e-01,  2.7956e-01,
        -2.0129e-01,  4.1748e-01,  1.6774e-01,  3.3547e-01,  1.1928e-01,
        1.9010e-01, -1.6774e-01,  4.7339e-01,  4.7339e-01,  1.6028e-01,
        -4.5103e-01,  1.6028e-01,  2.3110e-01, -4.7712e-01, -4.3612e-01,
        1.7519e-01, -1.9756e-01, -2.1992e-01, -8.5732e-02,  2.1247e-01,
        -1.8638e-02, -3.2056e-01,  1.1928e-01, -1.3792e-01,
        -1.6464e-01, -1.5435e-01,  1.0804e-01,  6.5856e-01,  6.1225e-01,
        -6.5342e-01, -6.6885e-02,  1.0290e-01,  3.8073e-01, -4.5276e-01,
        -5.8139e-01, -2.7783e-01,  5.0421e-01, -1.6978e-01,  4.8363e-01,
        -4.9906e-01,  2.4696e-01, -4.1160e-01, -5.6595e-02,  6.5856e-01,
        5.0936e-01,  5.4537e-01,  1.5435e-02,  4.6819e-01,  1.2348e-01,
        4.1160e-01,  5.1450e-02,  0.0000e+00, -4.9392e-01,  4.0131e-01,
        -8.2320e-02, -7.7175e-02,  8.2320e-02, -4.6305e-01,  6.5856e-01,
        3.7044e-01,  4.5276e-01,  5.6595e-01,  9.7755e-02,  5.1964e-01,
        -4.5790e-01, -5.0421e-01,  8.2320e-02,  5.7624e-01,  3.3443e-01,
        -6.3798e-01,  5.7109e-01, -1.1834e-01, -6.5342e-01, -5.0421e-01,
        7.7175e-02, -1.5949e-01, -5.0936e-01, -4.5276e-01,  6.5342e-01,
        -5.6595e-01, -6.3283e-01,  3.4986e-01, -4.3733e-01,  2.8812e-01,
        -4.9906e-01, -2.0580e-01, -5.1964e-01,  4.1160e-02,
        -6.3000e-02,  3.2256e-01,  4.0320e-02, -1.0080e-01,  1.0332e-01,
        2.5200e-01,  1.1592e-01, -1.1088e-01, -6.0480e-02, -3.2004e-01,
        -2.4948e-01,  2.4192e-01,  2.4444e-01,  1.0836e-01,  2.5452e-01,
        2.7720e-02,  2.2176e-01, -1.7136e-01,  2.4192e-01,  1.0332e-01,
        -1.0584e-01,  6.3000e-02, -3.0240e-02,  3.1500e-01,  1.8648e-01,
        -1.2600e-01, -1.2852e-01,  1.9908e-01,  3.2256e-01, -3.0996e-01,
        -1.9152e-01, -2.0160e-01, -2.9988e-01, -5.2920e-02, -2.6712e-01,
        1.5624e-01,  1.9908e-01,  5.2920e-02, -7.5600e-03, -1.1844e-01,
        1.9404e-01, -4.7880e-02,  1.9152e-01,  2.5200e-02, -1.4112e-01,
        3.2004e-01, -1.5372e-01,  2.5956e-01, -6.3000e-02, -2.7720e-02,
        6.3000e-02, -3.2004e-01, -3.0240e-02,  3.7800e-02,  1.9656e-01,
        -1.5624e-01, -3.2004e-01,  3.1248e-01,  2.1672e-01,  1.8144e-01,
        5.0400e-02, -7.3080e-02,  3.0240e-02,  3.1500e-01,
        1.5487e-01, -7.9296e-01, -9.9120e-02,  2.4780e-01, -2.5400e-01,
        -6.1950e-01, -2.8497e-01,  2.7258e-01,  1.4868e-01,  7.8676e-01,
        6.1330e-01, -5.9472e-01, -6.0092e-01, -2.6638e-01, -6.2569e-01,
        -6.8145e-02, -5.4516e-01,  4.2126e-01, -5.9472e-01, -2.5400e-01,
        2.6019e-01, -1.5487e-01,  7.4340e-02, -7.7438e-01, -4.5843e-01,
        3.0975e-01,  3.1594e-01, -4.8941e-01, -7.9296e-01,  7.6199e-01,
        4.7082e-01,  4.9560e-01,  7.3720e-01,  1.3010e-01,  6.5667e-01,
        -3.8409e-01, -4.8941e-01, -1.3010e-01,  1.8585e-02,  2.9116e-01,
        -4.7701e-01,  1.1771e-01, -4.7082e-01, -6.1950e-02,  3.4692e-01,
        -7.8676e-01,  3.7789e-01, -6.3809e-01,  1.5487e-01,  6.8145e-02,
        -1.5487e-01,  7.8676e-01,  7.4340e-02, -9.2925e-02, -4.8321e-01,
        3.8409e-01,  7.8676e-01, -7.6818e-01, -5.3277e-01, -4.4604e-01,
        -1.2390e-01,  1.7966e-01, -7.4340e-02, -7.7438e-01,
        8.7150e-03,  3.1500e-03,  1.1130e-02, -9.3450e-03, -8.9250e-03,
        1.2600e-02,  2.1000e-04,  1.3440e-02, -1.3335e-02,  1.1760e-02,
        5.8800e-03, -1.3335e-02,  3.0450e-03,  6.9300e-03,  3.6750e-03,
        1.3440e-02,  1.0500e-04, -1.7850e-03, -1.0500e-04,  1.3440e-02,
        1.3335e-02, -1.3230e-02, -5.8800e-03,  1.1550e-03, -8.0850e-03,
        -2.2050e-03,  1.3440e-02, -1.0920e-02, -9.2400e-03,  4.9350e-03,
        -7.9800e-03,  1.3440e-02, -3.1500e-04, -1.4700e-03, -1.1235e-02,
        -9.6600e-03,  1.0710e-02,  1.2075e-02, -3.5700e-03, -1.1025e-02,
        -1.3335e-02, -9.8700e-03,  9.9750e-03, -5.2500e-04, -1.1445e-02,
        5.9850e-03, -1.3335e-02, -5.9850e-03, -6.3000e-03,  8.6100e-03,
        -3.8850e-03,  1.2180e-02,  1.2285e-02,  1.1340e-02,  4.2000e-03,
        9.1350e-03,  1.3440e-02,  1.2180e-02,  8.5050e-03, -1.1130e-02,
        -1.2915e-02,  2.4150e-03,  8.6100e-03, -5.4600e-03
    };

    sparse::quantized_sparse_linear_vectorized_forward(B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale, O);

    for (int i = 0; i < 320; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.05f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearBackward1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale = 0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    // TODO: Use dithered quantization output here
    int8_t dLdO[20] = {
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    };
    float dLdO_scale = 5.0f;
    float dLdX[16] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
    };
    float expected_dLdX[16] = {
        -3.6750, -3.6750, -3.6750, -3.6750,
        2.6625, 2.6625, 2.6625, 2.6625,
        2.6250, 2.6250, 2.6250, 2.6250,
        -0.0750, -0.0750, -0.0750, -0.0750
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {-8.06, -0.8775, 2.6325, 2.6325, -5.135};

    sparse::quantized_sparse_linear_vectorized_backward(
        B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale,
        dLdO, dLdO_scale, dLdX, dLdW_val
    );

    for (int i = 0; i < 16; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.01f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearBackward2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32, 30, -21, -128, -119, 127, 13, -20,
        -74, 88, 113, 54, -98, 33, -94, 97,
        -48, 80, 11, -128, -99, -106, -3, -91,
        -24, -80, -10, -0, 96, -78, 16, 15,
        -16, 90, -128, -72, -88, -110, -19, -101,
        89, 98, -16, -112, -65, 124, -111, 23,
        127, 98, -15, 31, 99, 88, -127, 110,
        123, -68, 85, -56, 97, 40, 101, -8,

        83, -32, -29, -113, 54, -79, 37, -128,
        34, -80, 55, 5, 113, -128, 112, -18,
        -86, -13, -64, 3, 46, -16, 67, 112,
        -47, 56, -54, 86, 98, 3, -51, 116,
        -10, -73, 16, -58, 25, -54, 94, 75,
        -54, 112, 45, 90, 32, 51, -45, 127,
        127, 43, -121, 43, 62, -128, -117, 47,
        -53, -59, -23, 57, -5, -86, 32, -37,

        25, -128, -16, 40, -41, -100, -46, 44,
        24, 127, 99, -96, -97, -43, -101, -11,
        -88, 68, -96, -41, 42, -25, 12, -125,
        -74, 50, 51, -79, -128, 123, 76, 80,
        119, 21, 106, -62, -79, -21, 3, 47,
        -77, 19, -76, -10, 56, -127, 61, -103,
        25, 11, -25, 127, 12, -15, -78, 62,
        127, -124, -86, -72, -20, 29, -12, -125,

        -83, -30, -106, 89, 85, -120, -2, -128,
        127, -112, -56, 127, -29, -66, -35, -128,
        -1, 17, 1, -128, -127, 126, 56, -11,
        77, 21, -128, 104, 88, -47, 76, -128,
        3, 14, 107, 92, -102, -115, 34, 105,
        127, 94, -95, 5, 109, -57, 127, 57,
        60, -82, 37, -116, -117, -108, -40, -87,
        -128, -116, -81, 106, 123, -23, -82, 52
    };
    float X_scale = 0.0070;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    int8_t dLdO[320] = {
        -33, -21, -32, 50, -25, 46, 30, -39, 51, 25, -33, -48,
        38, 23, -55, 54, 6, 17, -24, -16, -30, 8, -30, -18,
        43, 38, 47, 17, 45, 48, 53, -25, 48, -44, 28, 17,
        -33, 9, 16, 5, -41, 44, -51, -31, 10, 42, -35, -48,
        -8, 8, 9, -11, -6, 54, -38, 28, -21, 52, -44, 9,
        -33, -1, 41, 5,

        -9, -17,  6, 54, 14, -14, -55, 25, 55, -29, 15, 26,
        20, 8, -55, -47, -21, 30, 29, 31, -38, 31, 53, 43,
        -40, -53, 38, -44, -32, -46, 50, -11, -31, -29, -7, -50,
        40, 11, -48, -26, 18, -21, -48, 38, 10, 13, 53, 49,
        13, -40, 14, -5, -20, -24,  -21,  25, 31, 42, -44, -3,
        54, -29, -1, -50,

        -27, -2, 34, -38, -37, -48, 51, 0, -20, 34, -46, -34,
        1, -39, 47, -10, 4, -39, 16, 28, 46, 33, -16, 14,
        -14, -36, 28, -47, 36, 49, 29, 37, -48, 35, -22, -28,
        41, 46, 32, 18, 16, -37, -38, -55, -8, -50, -6, -31,
        -2, -13, 6, -2, 47, -20, 52, -10, -3, -40, 8, -23,
        -33, -40, 46, -54,

        -27, 48, -25, -29, 5, 16, 45, -34, -34, -26, -31, 6,
        14, 2, -7, 27, -19, 20, -38, 33, 12, 39, -41, -46,
        43, -39, 4, -27, 26, 20, 55, -18, -43, -39, -51, -49,
        -30, 15, -34, -2, 9, 21, -9, 24, 43, 26, -42, 51,
        22, -36, 5, -48, -3, 53, -15, 19, 7, -12, -18, -52,
        40, -7, 45, -12,

        34, 28, 12, 5, 41, 17, 9, -52, -4, 6, 51, 30,
        45, -53, -19, 33, -18, -21, -39, 29, 43, -37, 32, 52,
        46, -11, -47, -14, -19, -8, 52, -37, -2, -43, 36, -34,
        29, -9, 39, 54, 43, 27, -31, -34, -11, 15, -10, -51,
        3, 46, -44, 53, 49, 49, 14, -27, -36, -13, 12, 33,
        -22, -50, -36, -6
    };
    float dLdO_scale = 0.0181f;
    float dLdX[256];
    for (int i = 0; i < 256; i++) {
        dLdX[i] = 0.0f;
    }
    float expected_dLdX[256] = {
        1.0620e-01,  2.2566e-01, -6.6372e-02, -7.1682e-01, -1.8584e-01,
        1.8584e-01,  7.3009e-01, -3.3186e-01, -7.3009e-01,  3.8496e-01,
        -1.9912e-01, -3.4513e-01, -2.6549e-01, -1.0620e-01,  7.3009e-01,
        6.2390e-01,  2.7876e-01, -3.8496e-01, -3.8496e-01, -4.1151e-01,
        5.1770e-01, -4.2478e-01, -7.0354e-01, -5.7080e-01,  5.4425e-01,
        6.9027e-01, -5.0443e-01,  5.7080e-01,  4.1151e-01,  6.1062e-01,
        -6.6372e-01,  1.3274e-01,  4.1151e-01,  3.8496e-01,  7.9646e-02,
        6.6372e-01, -5.3098e-01, -1.5929e-01,  6.2390e-01,  3.4513e-01,
        -2.3894e-01,  2.7876e-01,  6.3717e-01, -5.0443e-01, -1.3274e-01,
        -1.7257e-01, -7.1682e-01, -6.5045e-01, -1.7257e-01,  5.3098e-01,
        -1.8584e-01,  5.3098e-02,  2.6549e-01,  3.1859e-01,  2.7876e-01,
        -3.3186e-01, -4.1151e-01, -5.5752e-01,  5.8407e-01,  3.9823e-02,
        -7.1682e-01,  3.8496e-01,  1.3274e-02,  6.6372e-01,

        -3.1737e-01, -2.1158e-01, -2.9813e-01,  4.9048e-01, -2.4043e-01,
        4.4239e-01,  2.9813e-01, -3.7507e-01,  5.0009e-01,  2.4043e-01,
        -3.0775e-01, -4.7124e-01,  3.6545e-01,  2.2119e-01, -5.2894e-01,
        5.1933e-01,  5.7703e-02,  1.7311e-01, -2.3081e-01, -1.4426e-01,
        -2.8851e-01,  6.7320e-02, -2.7890e-01, -1.7311e-01,  4.1354e-01,
        3.6545e-01,  4.6162e-01,  1.6349e-01,  4.4239e-01,  4.6162e-01,
        5.0971e-01, -2.5005e-01,  4.6162e-01, -4.2316e-01,  2.7890e-01,
        1.6349e-01, -3.1737e-01,  8.6554e-02,  1.6349e-01,  3.8469e-02,
        -3.9430e-01,  4.3277e-01, -4.9048e-01, -2.9813e-01,  9.6172e-02,
        4.0392e-01, -3.2698e-01, -4.6162e-01, -7.6937e-02,  8.6554e-02,
        8.6554e-02, -1.0579e-01, -5.7703e-02,  5.1933e-01, -3.6545e-01,
        2.5966e-01, -2.0196e-01,  5.0009e-01, -4.2316e-01,  8.6554e-02,
        -3.1737e-01, -9.6172e-03,  3.9430e-01,  3.8469e-02,

        -2.7199e-01,  7.8671e-01, -6.2065e-01, -2.0995e-01,  3.2048e-01,
        5.6782e-01,  3.8767e-01, -5.4344e-01, -4.2939e-01, -6.3663e-01,
        -1.8991e-01,  3.1696e-01,  2.1727e-01,  3.0802e-01, -4.1747e-01,
        5.1906e-01, -3.2969e-01,  5.7324e-01, -7.1140e-01,  3.5191e-01,
        -1.0728e-01,  4.0880e-01, -5.5129e-01, -8.1028e-01,  7.7831e-01,
        -3.7981e-01, -1.1812e-01, -1.1947e-01,  1.6552e-01, -1.4900e-02,
        6.9054e-01, -5.4425e-01, -3.9119e-01, -8.4441e-01, -6.8810e-01,
        -6.0114e-01, -7.6206e-01, -4.3345e-02, -7.6098e-01, -1.4900e-01,
        4.6325e-02,  5.9220e-01,  8.7232e-02,  7.3470e-01,  7.3930e-01,
        7.5664e-01, -6.3229e-01,  1.0232e+00,  3.7412e-01, -5.0036e-01,
        4.7409e-02, -7.4770e-01, -3.3755e-01,  9.7716e-01, -5.7784e-01,
        3.6220e-01,  1.2191e-01,  6.8268e-02, -3.4622e-01, -6.8160e-01,
        8.6988e-01,  1.4819e-01,  4.2668e-01,  1.7528e-01,

        -9.2108e-03, -7.5854e-03, -2.9800e-03, -1.0836e-03, -1.1107e-02,
        -4.6054e-03, -2.4382e-03,  1.4358e-02,  1.0836e-03, -1.6254e-03,
        -1.3816e-02, -8.1272e-03, -1.2462e-02,  1.4358e-02,  5.1472e-03,
        -8.9399e-03,  4.8763e-03,  5.6890e-03,  1.0294e-02, -7.8563e-03,
        -1.1649e-02,  1.0294e-02, -8.6690e-03, -1.4358e-02, -1.2462e-02,
        2.9800e-03,  1.3003e-02,  4.0636e-03,  5.1472e-03,  2.4382e-03,
        -1.4087e-02,  1.0024e-02,  5.4181e-04,  1.1649e-02, -9.4817e-03,
        9.2108e-03, -8.1272e-03,  2.4382e-03, -1.0294e-02, -1.4629e-02,
        -1.1378e-02, -7.3145e-03,  8.1272e-03,  8.9399e-03,  2.9800e-03,
        -4.0636e-03,  2.7091e-03,  1.3816e-02, -8.1272e-04, -1.2462e-02,
        1.1920e-02, -1.4358e-02, -1.3274e-02, -1.3274e-02, -3.7927e-03,
        7.3145e-03,  9.4817e-03,  3.5218e-03, -3.2509e-03, -9.2108e-03,
        5.6890e-03,  1.3545e-02,  9.7526e-03,  1.6254e-03
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {
        -2.6445, -2.6210, 1.7794, -3.0625, 0.2901
    };

    sparse::quantized_sparse_linear_vectorized_backward(
        B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale,
        dLdO, dLdO_scale, dLdX, dLdW_val
    );

    // TODO: Check the results of vectorized loop and scalar loop
    for (int i = 0; i < 256; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.05f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], 0.15f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearForwardParallel1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale = 0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    float O[20] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f
    };
    // O = (XW)^T
    float expected_O[20] = {
        -0.4430, -0.4084, 0.1904, -0.1973,
        0.3296, 0.6115, -0.3631, -0.4491,
        -0.2668, 0.0608,  0.2457, -0.2293,
        0.6558, -0.1496, -0.6040, 0.5637,
        0.0032, 0.0125, -0.0013, 0.0010
    };

    sparse::quantized_sparse_linear_vectorized_parallel_forward(B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale, O);

    for (int i = 0; i < 20; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearForwardParallel2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32, 30, -21, -128, -119, 127, 13, -20,
        -74, 88, 113, 54, -98, 33, -94, 97,
        -48, 80, 11, -128, -99, -106, -3, -91,
        -24, -80, -10, -0, 96, -78, 16, 15,
        -16, 90, -128, -72, -88, -110, -19, -101,
        89, 98, -16, -112, -65, 124, -111, 23,
        127, 98, -15, 31, 99, 88, -127, 110,
        123, -68, 85, -56, 97, 40, 101, -8,

        83, -32, -29, -113, 54, -79, 37, -128,
        34, -80, 55, 5, 113, -128, 112, -18,
        -86, -13, -64, 3, 46, -16, 67, 112,
        -47, 56, -54, 86, 98, 3, -51, 116,
        -10, -73, 16, -58, 25, -54, 94, 75,
        -54, 112, 45, 90, 32, 51, -45, 127,
        127, 43, -121, 43, 62, -128, -117, 47,
        -53, -59, -23, 57, -5, -86, 32, -37,

        25, -128, -16, 40, -41, -100, -46, 44,
        24, 127, 99, -96, -97, -43, -101, -11,
        -88, 68, -96, -41, 42, -25, 12, -125,
        -74, 50, 51, -79, -128, 123, 76, 80,
        119, 21, 106, -62, -79, -21, 3, 47,
        -77, 19, -76, -10, 56, -127, 61, -103,
        25, 11, -25, 127, 12, -15, -78, 62,
        127, -124, -86, -72, -20, 29, -12, -125,

        -83, -30, -106, 89, 85, -120, -2, -128,
        127, -112, -56, 127, -29, -66, -35, -128,
        -1, 17, 1, -128, -127, 126, 56, -11,
        77, 21, -128, 104, 88, -47, 76, -128,
        3, 14, 107, 92, -102, -115, 34, 105,
        127, 94, -95, 5, 109, -57, 127, 57,
        60, -82, 37, -116, -117, -108, -40, -87,
        -128, -116, -81, 106, 123, -23, -82, 52
    };
    float X_scale = 0.0070;//0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    float O[320];
    for (int i = 0; i < 320; i++) {
        O[i] = 0.0f;
    }
    float expected_O[320] = {
        3.0938e-01, -1.1928e-01, -1.0810e-01, -4.2121e-01,  2.0129e-01,
        -2.9447e-01,  1.3792e-01, -4.7712e-01,  1.2674e-01, -2.9820e-01,
        2.0501e-01,  1.8638e-02,  4.2121e-01, -4.7712e-01,  4.1748e-01,
        -6.7095e-02, -3.2056e-01, -4.8457e-02, -2.3856e-01,  1.1183e-02,
        1.7146e-01, -5.9640e-02,  2.4974e-01,  4.1748e-01, -1.7519e-01,
        2.0874e-01, -2.0129e-01,  3.2056e-01,  3.6529e-01,  1.1183e-02,
        -1.9010e-01,  4.3239e-01, -3.7275e-02, -2.7211e-01,  5.9640e-02,
        -2.1620e-01,  9.3187e-02, -2.0129e-01,  3.5039e-01,  2.7956e-01,
        -2.0129e-01,  4.1748e-01,  1.6774e-01,  3.3547e-01,  1.1928e-01,
        1.9010e-01, -1.6774e-01,  4.7339e-01,  4.7339e-01,  1.6028e-01,
        -4.5103e-01,  1.6028e-01,  2.3110e-01, -4.7712e-01, -4.3612e-01,
        1.7519e-01, -1.9756e-01, -2.1992e-01, -8.5732e-02,  2.1247e-01,
        -1.8638e-02, -3.2056e-01,  1.1928e-01, -1.3792e-01,
        -1.6464e-01, -1.5435e-01,  1.0804e-01,  6.5856e-01,  6.1225e-01,
        -6.5342e-01, -6.6885e-02,  1.0290e-01,  3.8073e-01, -4.5276e-01,
        -5.8139e-01, -2.7783e-01,  5.0421e-01, -1.6978e-01,  4.8363e-01,
        -4.9906e-01,  2.4696e-01, -4.1160e-01, -5.6595e-02,  6.5856e-01,
        5.0936e-01,  5.4537e-01,  1.5435e-02,  4.6819e-01,  1.2348e-01,
        4.1160e-01,  5.1450e-02,  0.0000e+00, -4.9392e-01,  4.0131e-01,
        -8.2320e-02, -7.7175e-02,  8.2320e-02, -4.6305e-01,  6.5856e-01,
        3.7044e-01,  4.5276e-01,  5.6595e-01,  9.7755e-02,  5.1964e-01,
        -4.5790e-01, -5.0421e-01,  8.2320e-02,  5.7624e-01,  3.3443e-01,
        -6.3798e-01,  5.7109e-01, -1.1834e-01, -6.5342e-01, -5.0421e-01,
        7.7175e-02, -1.5949e-01, -5.0936e-01, -4.5276e-01,  6.5342e-01,
        -5.6595e-01, -6.3283e-01,  3.4986e-01, -4.3733e-01,  2.8812e-01,
        -4.9906e-01, -2.0580e-01, -5.1964e-01,  4.1160e-02,
        -6.3000e-02,  3.2256e-01,  4.0320e-02, -1.0080e-01,  1.0332e-01,
        2.5200e-01,  1.1592e-01, -1.1088e-01, -6.0480e-02, -3.2004e-01,
        -2.4948e-01,  2.4192e-01,  2.4444e-01,  1.0836e-01,  2.5452e-01,
        2.7720e-02,  2.2176e-01, -1.7136e-01,  2.4192e-01,  1.0332e-01,
        -1.0584e-01,  6.3000e-02, -3.0240e-02,  3.1500e-01,  1.8648e-01,
        -1.2600e-01, -1.2852e-01,  1.9908e-01,  3.2256e-01, -3.0996e-01,
        -1.9152e-01, -2.0160e-01, -2.9988e-01, -5.2920e-02, -2.6712e-01,
        1.5624e-01,  1.9908e-01,  5.2920e-02, -7.5600e-03, -1.1844e-01,
        1.9404e-01, -4.7880e-02,  1.9152e-01,  2.5200e-02, -1.4112e-01,
        3.2004e-01, -1.5372e-01,  2.5956e-01, -6.3000e-02, -2.7720e-02,
        6.3000e-02, -3.2004e-01, -3.0240e-02,  3.7800e-02,  1.9656e-01,
        -1.5624e-01, -3.2004e-01,  3.1248e-01,  2.1672e-01,  1.8144e-01,
        5.0400e-02, -7.3080e-02,  3.0240e-02,  3.1500e-01,
        1.5487e-01, -7.9296e-01, -9.9120e-02,  2.4780e-01, -2.5400e-01,
        -6.1950e-01, -2.8497e-01,  2.7258e-01,  1.4868e-01,  7.8676e-01,
        6.1330e-01, -5.9472e-01, -6.0092e-01, -2.6638e-01, -6.2569e-01,
        -6.8145e-02, -5.4516e-01,  4.2126e-01, -5.9472e-01, -2.5400e-01,
        2.6019e-01, -1.5487e-01,  7.4340e-02, -7.7438e-01, -4.5843e-01,
        3.0975e-01,  3.1594e-01, -4.8941e-01, -7.9296e-01,  7.6199e-01,
        4.7082e-01,  4.9560e-01,  7.3720e-01,  1.3010e-01,  6.5667e-01,
        -3.8409e-01, -4.8941e-01, -1.3010e-01,  1.8585e-02,  2.9116e-01,
        -4.7701e-01,  1.1771e-01, -4.7082e-01, -6.1950e-02,  3.4692e-01,
        -7.8676e-01,  3.7789e-01, -6.3809e-01,  1.5487e-01,  6.8145e-02,
        -1.5487e-01,  7.8676e-01,  7.4340e-02, -9.2925e-02, -4.8321e-01,
        3.8409e-01,  7.8676e-01, -7.6818e-01, -5.3277e-01, -4.4604e-01,
        -1.2390e-01,  1.7966e-01, -7.4340e-02, -7.7438e-01,
        8.7150e-03,  3.1500e-03,  1.1130e-02, -9.3450e-03, -8.9250e-03,
        1.2600e-02,  2.1000e-04,  1.3440e-02, -1.3335e-02,  1.1760e-02,
        5.8800e-03, -1.3335e-02,  3.0450e-03,  6.9300e-03,  3.6750e-03,
        1.3440e-02,  1.0500e-04, -1.7850e-03, -1.0500e-04,  1.3440e-02,
        1.3335e-02, -1.3230e-02, -5.8800e-03,  1.1550e-03, -8.0850e-03,
        -2.2050e-03,  1.3440e-02, -1.0920e-02, -9.2400e-03,  4.9350e-03,
        -7.9800e-03,  1.3440e-02, -3.1500e-04, -1.4700e-03, -1.1235e-02,
        -9.6600e-03,  1.0710e-02,  1.2075e-02, -3.5700e-03, -1.1025e-02,
        -1.3335e-02, -9.8700e-03,  9.9750e-03, -5.2500e-04, -1.1445e-02,
        5.9850e-03, -1.3335e-02, -5.9850e-03, -6.3000e-03,  8.6100e-03,
        -3.8850e-03,  1.2180e-02,  1.2285e-02,  1.1340e-02,  4.2000e-03,
        9.1350e-03,  1.3440e-02,  1.2180e-02,  8.5050e-03, -1.1130e-02,
        -1.2915e-02,  2.4150e-03,  8.6100e-03, -5.4600e-03
    };

    sparse::quantized_sparse_linear_vectorized_parallel_forward(B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale, O);

    for (int i = 0; i < 320; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.05f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearBackwardParallel1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale = 0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    // TODO: Use dithered quantization output here
    int8_t dLdO[20] = {
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    };
    float dLdO_scale = 5.0f;
    float dLdX[16] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
    };
    float expected_dLdX[16] = {
        -3.6750, -3.6750, -3.6750, -3.6750,
        2.6625, 2.6625, 2.6625, 2.6625,
        2.6250, 2.6250, 2.6250, 2.6250,
        -0.0750, -0.0750, -0.0750, -0.0750
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {-8.06, -0.8775, 2.6325, 2.6325, -5.135};

    sparse::quantized_sparse_linear_vectorized_parallel_backward(
        B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale,
        dLdO, dLdO_scale, dLdX, dLdW_val
    );

    for (int i = 0; i < 16; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.01f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeSparseLinearBackwardParallel2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32, 30, -21, -128, -119, 127, 13, -20,
        -74, 88, 113, 54, -98, 33, -94, 97,
        -48, 80, 11, -128, -99, -106, -3, -91,
        -24, -80, -10, -0, 96, -78, 16, 15,
        -16, 90, -128, -72, -88, -110, -19, -101,
        89, 98, -16, -112, -65, 124, -111, 23,
        127, 98, -15, 31, 99, 88, -127, 110,
        123, -68, 85, -56, 97, 40, 101, -8,

        83, -32, -29, -113, 54, -79, 37, -128,
        34, -80, 55, 5, 113, -128, 112, -18,
        -86, -13, -64, 3, 46, -16, 67, 112,
        -47, 56, -54, 86, 98, 3, -51, 116,
        -10, -73, 16, -58, 25, -54, 94, 75,
        -54, 112, 45, 90, 32, 51, -45, 127,
        127, 43, -121, 43, 62, -128, -117, 47,
        -53, -59, -23, 57, -5, -86, 32, -37,

        25, -128, -16, 40, -41, -100, -46, 44,
        24, 127, 99, -96, -97, -43, -101, -11,
        -88, 68, -96, -41, 42, -25, 12, -125,
        -74, 50, 51, -79, -128, 123, 76, 80,
        119, 21, 106, -62, -79, -21, 3, 47,
        -77, 19, -76, -10, 56, -127, 61, -103,
        25, 11, -25, 127, 12, -15, -78, 62,
        127, -124, -86, -72, -20, 29, -12, -125,

        -83, -30, -106, 89, 85, -120, -2, -128,
        127, -112, -56, 127, -29, -66, -35, -128,
        -1, 17, 1, -128, -127, 126, 56, -11,
        77, 21, -128, 104, 88, -47, 76, -128,
        3, 14, 107, 92, -102, -115, 34, 105,
        127, 94, -95, 5, 109, -57, 127, 57,
        60, -82, 37, -116, -117, -108, -40, -87,
        -128, -116, -81, 106, 123, -23, -82, 52
    };
    float X_scale = 0.0070;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale = 0.0075;
    int8_t dLdO[320] = {
        -33, -21, -32, 50, -25, 46, 30, -39, 51, 25, -33, -48,
        38, 23, -55, 54, 6, 17, -24, -16, -30, 8, -30, -18,
        43, 38, 47, 17, 45, 48, 53, -25, 48, -44, 28, 17,
        -33, 9, 16, 5, -41, 44, -51, -31, 10, 42, -35, -48,
        -8, 8, 9, -11, -6, 54, -38, 28, -21, 52, -44, 9,
        -33, -1, 41, 5,

        -9, -17,  6, 54, 14, -14, -55, 25, 55, -29, 15, 26,
        20, 8, -55, -47, -21, 30, 29, 31, -38, 31, 53, 43,
        -40, -53, 38, -44, -32, -46, 50, -11, -31, -29, -7, -50,
        40, 11, -48, -26, 18, -21, -48, 38, 10, 13, 53, 49,
        13, -40, 14, -5, -20, -24,  -21,  25, 31, 42, -44, -3,
        54, -29, -1, -50,

        -27, -2, 34, -38, -37, -48, 51, 0, -20, 34, -46, -34,
        1, -39, 47, -10, 4, -39, 16, 28, 46, 33, -16, 14,
        -14, -36, 28, -47, 36, 49, 29, 37, -48, 35, -22, -28,
        41, 46, 32, 18, 16, -37, -38, -55, -8, -50, -6, -31,
        -2, -13, 6, -2, 47, -20, 52, -10, -3, -40, 8, -23,
        -33, -40, 46, -54,

        -27, 48, -25, -29, 5, 16, 45, -34, -34, -26, -31, 6,
        14, 2, -7, 27, -19, 20, -38, 33, 12, 39, -41, -46,
        43, -39, 4, -27, 26, 20, 55, -18, -43, -39, -51, -49,
        -30, 15, -34, -2, 9, 21, -9, 24, 43, 26, -42, 51,
        22, -36, 5, -48, -3, 53, -15, 19, 7, -12, -18, -52,
        40, -7, 45, -12,

        34, 28, 12, 5, 41, 17, 9, -52, -4, 6, 51, 30,
        45, -53, -19, 33, -18, -21, -39, 29, 43, -37, 32, 52,
        46, -11, -47, -14, -19, -8, 52, -37, -2, -43, 36, -34,
        29, -9, 39, 54, 43, 27, -31, -34, -11, 15, -10, -51,
        3, 46, -44, 53, 49, 49, 14, -27, -36, -13, 12, 33,
        -22, -50, -36, -6
    };
    float dLdO_scale = 0.0181f;
    float dLdX[256];
    for (int i = 0; i < 256; i++) {
        dLdX[i] = 0.0f;
    }
    float expected_dLdX[256] = {
        1.0620e-01,  2.2566e-01, -6.6372e-02, -7.1682e-01, -1.8584e-01,
        1.8584e-01,  7.3009e-01, -3.3186e-01, -7.3009e-01,  3.8496e-01,
        -1.9912e-01, -3.4513e-01, -2.6549e-01, -1.0620e-01,  7.3009e-01,
        6.2390e-01,  2.7876e-01, -3.8496e-01, -3.8496e-01, -4.1151e-01,
        5.1770e-01, -4.2478e-01, -7.0354e-01, -5.7080e-01,  5.4425e-01,
        6.9027e-01, -5.0443e-01,  5.7080e-01,  4.1151e-01,  6.1062e-01,
        -6.6372e-01,  1.3274e-01,  4.1151e-01,  3.8496e-01,  7.9646e-02,
        6.6372e-01, -5.3098e-01, -1.5929e-01,  6.2390e-01,  3.4513e-01,
        -2.3894e-01,  2.7876e-01,  6.3717e-01, -5.0443e-01, -1.3274e-01,
        -1.7257e-01, -7.1682e-01, -6.5045e-01, -1.7257e-01,  5.3098e-01,
        -1.8584e-01,  5.3098e-02,  2.6549e-01,  3.1859e-01,  2.7876e-01,
        -3.3186e-01, -4.1151e-01, -5.5752e-01,  5.8407e-01,  3.9823e-02,
        -7.1682e-01,  3.8496e-01,  1.3274e-02,  6.6372e-01,

        -3.1737e-01, -2.1158e-01, -2.9813e-01,  4.9048e-01, -2.4043e-01,
        4.4239e-01,  2.9813e-01, -3.7507e-01,  5.0009e-01,  2.4043e-01,
        -3.0775e-01, -4.7124e-01,  3.6545e-01,  2.2119e-01, -5.2894e-01,
        5.1933e-01,  5.7703e-02,  1.7311e-01, -2.3081e-01, -1.4426e-01,
        -2.8851e-01,  6.7320e-02, -2.7890e-01, -1.7311e-01,  4.1354e-01,
        3.6545e-01,  4.6162e-01,  1.6349e-01,  4.4239e-01,  4.6162e-01,
        5.0971e-01, -2.5005e-01,  4.6162e-01, -4.2316e-01,  2.7890e-01,
        1.6349e-01, -3.1737e-01,  8.6554e-02,  1.6349e-01,  3.8469e-02,
        -3.9430e-01,  4.3277e-01, -4.9048e-01, -2.9813e-01,  9.6172e-02,
        4.0392e-01, -3.2698e-01, -4.6162e-01, -7.6937e-02,  8.6554e-02,
        8.6554e-02, -1.0579e-01, -5.7703e-02,  5.1933e-01, -3.6545e-01,
        2.5966e-01, -2.0196e-01,  5.0009e-01, -4.2316e-01,  8.6554e-02,
        -3.1737e-01, -9.6172e-03,  3.9430e-01,  3.8469e-02,

        -2.7199e-01,  7.8671e-01, -6.2065e-01, -2.0995e-01,  3.2048e-01,
        5.6782e-01,  3.8767e-01, -5.4344e-01, -4.2939e-01, -6.3663e-01,
        -1.8991e-01,  3.1696e-01,  2.1727e-01,  3.0802e-01, -4.1747e-01,
        5.1906e-01, -3.2969e-01,  5.7324e-01, -7.1140e-01,  3.5191e-01,
        -1.0728e-01,  4.0880e-01, -5.5129e-01, -8.1028e-01,  7.7831e-01,
        -3.7981e-01, -1.1812e-01, -1.1947e-01,  1.6552e-01, -1.4900e-02,
        6.9054e-01, -5.4425e-01, -3.9119e-01, -8.4441e-01, -6.8810e-01,
        -6.0114e-01, -7.6206e-01, -4.3345e-02, -7.6098e-01, -1.4900e-01,
        4.6325e-02,  5.9220e-01,  8.7232e-02,  7.3470e-01,  7.3930e-01,
        7.5664e-01, -6.3229e-01,  1.0232e+00,  3.7412e-01, -5.0036e-01,
        4.7409e-02, -7.4770e-01, -3.3755e-01,  9.7716e-01, -5.7784e-01,
        3.6220e-01,  1.2191e-01,  6.8268e-02, -3.4622e-01, -6.8160e-01,
        8.6988e-01,  1.4819e-01,  4.2668e-01,  1.7528e-01,

        -9.2108e-03, -7.5854e-03, -2.9800e-03, -1.0836e-03, -1.1107e-02,
        -4.6054e-03, -2.4382e-03,  1.4358e-02,  1.0836e-03, -1.6254e-03,
        -1.3816e-02, -8.1272e-03, -1.2462e-02,  1.4358e-02,  5.1472e-03,
        -8.9399e-03,  4.8763e-03,  5.6890e-03,  1.0294e-02, -7.8563e-03,
        -1.1649e-02,  1.0294e-02, -8.6690e-03, -1.4358e-02, -1.2462e-02,
        2.9800e-03,  1.3003e-02,  4.0636e-03,  5.1472e-03,  2.4382e-03,
        -1.4087e-02,  1.0024e-02,  5.4181e-04,  1.1649e-02, -9.4817e-03,
        9.2108e-03, -8.1272e-03,  2.4382e-03, -1.0294e-02, -1.4629e-02,
        -1.1378e-02, -7.3145e-03,  8.1272e-03,  8.9399e-03,  2.9800e-03,
        -4.0636e-03,  2.7091e-03,  1.3816e-02, -8.1272e-04, -1.2462e-02,
        1.1920e-02, -1.4358e-02, -1.3274e-02, -1.3274e-02, -3.7927e-03,
        7.3145e-03,  9.4817e-03,  3.5218e-03, -3.2509e-03, -9.2108e-03,
        5.6890e-03,  1.3545e-02,  9.7526e-03,  1.6254e-03
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {
        -2.6445, -2.6210, 1.7794, -3.0625, 0.2901
    };

    sparse::quantized_sparse_linear_vectorized_parallel_backward(
        B, M, N, X, X_scale, W_idx_N, W_idx_M, W_val, W_scale,
        dLdO, dLdO_scale, dLdX, dLdW_val
    );

    // TODO: Check the results of vectorized loop and scalar loop
    for (int i = 0; i < 256; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.05f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], 0.15f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearForward1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale[1] = {0.0065};
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    float O[20] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f
    };
    // O = (XW)^T
    float expected_O[20] = {
        -0.4430, -0.4084, 0.1904, -0.1973,
        0.3296, 0.6115, -0.3631, -0.4491,
        -0.2668, 0.0608,  0.2457, -0.2293,
        0.6558, -0.1496, -0.6040, 0.5637,
        0.0032, 0.0125, -0.0013, 0.0010
    };

    sparse::quantized_grouped_sparse_linear_vectorized_forward(B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64, O);

    for (int i = 0; i < 20; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearForwardParallel1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale[1] = {0.0065};
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    float O[20] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f
    };
    // O = (XW)^T
    float expected_O[20] = {
        -0.4430, -0.4084, 0.1904, -0.1973,
        0.3296, 0.6115, -0.3631, -0.4491,
        -0.2668, 0.0608,  0.2457, -0.2293,
        0.6558, -0.1496, -0.6040, 0.5637,
        0.0032, 0.0125, -0.0013, 0.0010
    };

    sparse::quantized_grouped_sparse_linear_vectorized_parallel_forward(B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64, O);

    for (int i = 0; i < 20; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearForward2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32,   30,  -21, -128, -119,  127,   13,  -20,  -75,   88,  113,   54,
        -98,   33,  -95,   97,  -48,   80,   11, -128, -100, -107,   -3,  -91,
        -24,  -80,  -10,    0,   96,  -78,   16,   15,  -16,   90, -128,  -72,
        -88, -110,  -19, -101,   89,   98,  -16, -112,  -65,  125, -111,   23,
        127,   98,  -15,   31,  100,   88, -127,  110,  123,  -68,   85,  -56,
        97,   40,  101,   -8,

        90,  -35,  -32, -123,   58,  -86,   40, -128,   37,  -86,   60,    5,
        123, -128,  121,  -19,  -93,  -14,  -69,    3,   49,  -18,   73,  122,
        -51,   61,  -58,   93,  106,    4,  -56,  126,  -11,  -79,   17,  -63,
        27,  -59,  102,   81,  -59,  121,   49,   97,   35,   55,  -48,  127,
        127,   46, -128,   47,   67, -128, -126,   51,  -57,  -64,  -25,   62,
        -6,  -93,   35,  -40,

        24, -125,  -15,   38,  -39,  -96,  -44,   42,   23,  126,   95,  -92,
        -93,  -42,  -97,  -11,  -84,   65,  -92,  -39,   40,  -24,   11, -119,
        -70,   48,   49,  -76, -128,  118,   73,   77,  114,   20,  101,  -59,
        -75,  -20,    2,   45,  -74,   18,  -73,   -9,   54, -122,   58,  -98,
        24,   10,  -24,  127,   12,  -14,  -75,   59,  127, -118,  -83,  -69,
        -19,   27,  -12, -119,

        -88,  -32, -113,   95,   91, -128,   -3, -128,  127, -119,  -59,  127,
        -31,  -71,  -37, -128,   -1,   18,    1, -128, -128,  127,   60,  -11,
        83,   23, -128,  111,   94,  -51,   81, -128,    3,   15,  115,   99,
        -109, -123,   36,  112,  127,  100, -102,    6,  116,  -61,  127,   61,
        65,  -88,   40, -124, -125, -115,  -43,  -93, -128, -124,  -86,  113,
        127,  -25,  -88,   56
    };
    float X_scale[4] = {0.0070, 0.0065, 0.0074, 0.0066};//0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    float O[320];
    for (int i = 0; i < 320; i++) {
        O[i] = 0.0f;
    }
    float expected_O[320] = {
        3.0938e-01, -1.1928e-01, -1.0810e-01, -4.2121e-01,  2.0129e-01,
        -2.9447e-01,  1.3792e-01, -4.7712e-01,  1.2674e-01, -2.9820e-01,
        2.0501e-01,  1.8638e-02,  4.2121e-01, -4.7712e-01,  4.1748e-01,
        -6.7095e-02, -3.2056e-01, -4.8457e-02, -2.3856e-01,  1.1183e-02,
        1.7146e-01, -5.9640e-02,  2.4974e-01,  4.1748e-01, -1.7519e-01,
        2.0874e-01, -2.0129e-01,  3.2056e-01,  3.6529e-01,  1.1183e-02,
        -1.9010e-01,  4.3239e-01, -3.7275e-02, -2.7211e-01,  5.9640e-02,
        -2.1620e-01,  9.3187e-02, -2.0129e-01,  3.5039e-01,  2.7956e-01,
        -2.0129e-01,  4.1748e-01,  1.6774e-01,  3.3547e-01,  1.1928e-01,
        1.9010e-01, -1.6774e-01,  4.7339e-01,  4.7339e-01,  1.6028e-01,
        -4.5103e-01,  1.6028e-01,  2.3110e-01, -4.7712e-01, -4.3612e-01,
        1.7519e-01, -1.9756e-01, -2.1992e-01, -8.5732e-02,  2.1247e-01,
        -1.8638e-02, -3.2056e-01,  1.1928e-01, -1.3792e-01,
        -1.6464e-01, -1.5435e-01,  1.0804e-01,  6.5856e-01,  6.1225e-01,
        -6.5342e-01, -6.6885e-02,  1.0290e-01,  3.8073e-01, -4.5276e-01,
        -5.8139e-01, -2.7783e-01,  5.0421e-01, -1.6978e-01,  4.8363e-01,
        -4.9906e-01,  2.4696e-01, -4.1160e-01, -5.6595e-02,  6.5856e-01,
        5.0936e-01,  5.4537e-01,  1.5435e-02,  4.6819e-01,  1.2348e-01,
        4.1160e-01,  5.1450e-02,  0.0000e+00, -4.9392e-01,  4.0131e-01,
        -8.2320e-02, -7.7175e-02,  8.2320e-02, -4.6305e-01,  6.5856e-01,
        3.7044e-01,  4.5276e-01,  5.6595e-01,  9.7755e-02,  5.1964e-01,
        -4.5790e-01, -5.0421e-01,  8.2320e-02,  5.7624e-01,  3.3443e-01,
        -6.3798e-01,  5.7109e-01, -1.1834e-01, -6.5342e-01, -5.0421e-01,
        7.7175e-02, -1.5949e-01, -5.0936e-01, -4.5276e-01,  6.5342e-01,
        -5.6595e-01, -6.3283e-01,  3.4986e-01, -4.3733e-01,  2.8812e-01,
        -4.9906e-01, -2.0580e-01, -5.1964e-01,  4.1160e-02,
        -6.3000e-02,  3.2256e-01,  4.0320e-02, -1.0080e-01,  1.0332e-01,
        2.5200e-01,  1.1592e-01, -1.1088e-01, -6.0480e-02, -3.2004e-01,
        -2.4948e-01,  2.4192e-01,  2.4444e-01,  1.0836e-01,  2.5452e-01,
        2.7720e-02,  2.2176e-01, -1.7136e-01,  2.4192e-01,  1.0332e-01,
        -1.0584e-01,  6.3000e-02, -3.0240e-02,  3.1500e-01,  1.8648e-01,
        -1.2600e-01, -1.2852e-01,  1.9908e-01,  3.2256e-01, -3.0996e-01,
        -1.9152e-01, -2.0160e-01, -2.9988e-01, -5.2920e-02, -2.6712e-01,
        1.5624e-01,  1.9908e-01,  5.2920e-02, -7.5600e-03, -1.1844e-01,
        1.9404e-01, -4.7880e-02,  1.9152e-01,  2.5200e-02, -1.4112e-01,
        3.2004e-01, -1.5372e-01,  2.5956e-01, -6.3000e-02, -2.7720e-02,
        6.3000e-02, -3.2004e-01, -3.0240e-02,  3.7800e-02,  1.9656e-01,
        -1.5624e-01, -3.2004e-01,  3.1248e-01,  2.1672e-01,  1.8144e-01,
        5.0400e-02, -7.3080e-02,  3.0240e-02,  3.1500e-01,
        1.5487e-01, -7.9296e-01, -9.9120e-02,  2.4780e-01, -2.5400e-01,
        -6.1950e-01, -2.8497e-01,  2.7258e-01,  1.4868e-01,  7.8676e-01,
        6.1330e-01, -5.9472e-01, -6.0092e-01, -2.6638e-01, -6.2569e-01,
        -6.8145e-02, -5.4516e-01,  4.2126e-01, -5.9472e-01, -2.5400e-01,
        2.6019e-01, -1.5487e-01,  7.4340e-02, -7.7438e-01, -4.5843e-01,
        3.0975e-01,  3.1594e-01, -4.8941e-01, -7.9296e-01,  7.6199e-01,
        4.7082e-01,  4.9560e-01,  7.3720e-01,  1.3010e-01,  6.5667e-01,
        -3.8409e-01, -4.8941e-01, -1.3010e-01,  1.8585e-02,  2.9116e-01,
        -4.7701e-01,  1.1771e-01, -4.7082e-01, -6.1950e-02,  3.4692e-01,
        -7.8676e-01,  3.7789e-01, -6.3809e-01,  1.5487e-01,  6.8145e-02,
        -1.5487e-01,  7.8676e-01,  7.4340e-02, -9.2925e-02, -4.8321e-01,
        3.8409e-01,  7.8676e-01, -7.6818e-01, -5.3277e-01, -4.4604e-01,
        -1.2390e-01,  1.7966e-01, -7.4340e-02, -7.7438e-01,
        8.7150e-03,  3.1500e-03,  1.1130e-02, -9.3450e-03, -8.9250e-03,
        1.2600e-02,  2.1000e-04,  1.3440e-02, -1.3335e-02,  1.1760e-02,
        5.8800e-03, -1.3335e-02,  3.0450e-03,  6.9300e-03,  3.6750e-03,
        1.3440e-02,  1.0500e-04, -1.7850e-03, -1.0500e-04,  1.3440e-02,
        1.3335e-02, -1.3230e-02, -5.8800e-03,  1.1550e-03, -8.0850e-03,
        -2.2050e-03,  1.3440e-02, -1.0920e-02, -9.2400e-03,  4.9350e-03,
        -7.9800e-03,  1.3440e-02, -3.1500e-04, -1.4700e-03, -1.1235e-02,
        -9.6600e-03,  1.0710e-02,  1.2075e-02, -3.5700e-03, -1.1025e-02,
        -1.3335e-02, -9.8700e-03,  9.9750e-03, -5.2500e-04, -1.1445e-02,
        5.9850e-03, -1.3335e-02, -5.9850e-03, -6.3000e-03,  8.6100e-03,
        -3.8850e-03,  1.2180e-02,  1.2285e-02,  1.1340e-02,  4.2000e-03,
        9.1350e-03,  1.3440e-02,  1.2180e-02,  8.5050e-03, -1.1130e-02,
        -1.2915e-02,  2.4150e-03,  8.6100e-03, -5.4600e-03
    };

    sparse::quantized_grouped_sparse_linear_vectorized_forward(B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64, O);

    for (int i = 0; i < 320; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.05f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearForwardParallel2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32,   30,  -21, -128, -119,  127,   13,  -20,  -75,   88,  113,   54,
        -98,   33,  -95,   97,  -48,   80,   11, -128, -100, -107,   -3,  -91,
        -24,  -80,  -10,    0,   96,  -78,   16,   15,  -16,   90, -128,  -72,
        -88, -110,  -19, -101,   89,   98,  -16, -112,  -65,  125, -111,   23,
        127,   98,  -15,   31,  100,   88, -127,  110,  123,  -68,   85,  -56,
        97,   40,  101,   -8,

        90,  -35,  -32, -123,   58,  -86,   40, -128,   37,  -86,   60,    5,
        123, -128,  121,  -19,  -93,  -14,  -69,    3,   49,  -18,   73,  122,
        -51,   61,  -58,   93,  106,    4,  -56,  126,  -11,  -79,   17,  -63,
        27,  -59,  102,   81,  -59,  121,   49,   97,   35,   55,  -48,  127,
        127,   46, -128,   47,   67, -128, -126,   51,  -57,  -64,  -25,   62,
        -6,  -93,   35,  -40,

        24, -125,  -15,   38,  -39,  -96,  -44,   42,   23,  126,   95,  -92,
        -93,  -42,  -97,  -11,  -84,   65,  -92,  -39,   40,  -24,   11, -119,
        -70,   48,   49,  -76, -128,  118,   73,   77,  114,   20,  101,  -59,
        -75,  -20,    2,   45,  -74,   18,  -73,   -9,   54, -122,   58,  -98,
        24,   10,  -24,  127,   12,  -14,  -75,   59,  127, -118,  -83,  -69,
        -19,   27,  -12, -119,

        -88,  -32, -113,   95,   91, -128,   -3, -128,  127, -119,  -59,  127,
        -31,  -71,  -37, -128,   -1,   18,    1, -128, -128,  127,   60,  -11,
        83,   23, -128,  111,   94,  -51,   81, -128,    3,   15,  115,   99,
        -109, -123,   36,  112,  127,  100, -102,    6,  116,  -61,  127,   61,
        65,  -88,   40, -124, -125, -115,  -43,  -93, -128, -124,  -86,  113,
        127,  -25,  -88,   56
    };
    float X_scale[4] = {0.0070, 0.0065, 0.0074, 0.0066};//0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    float O[320];
    for (int i = 0; i < 320; i++) {
        O[i] = 0.0f;
    }
    float expected_O[320] = {
        3.0938e-01, -1.1928e-01, -1.0810e-01, -4.2121e-01,  2.0129e-01,
        -2.9447e-01,  1.3792e-01, -4.7712e-01,  1.2674e-01, -2.9820e-01,
        2.0501e-01,  1.8638e-02,  4.2121e-01, -4.7712e-01,  4.1748e-01,
        -6.7095e-02, -3.2056e-01, -4.8457e-02, -2.3856e-01,  1.1183e-02,
        1.7146e-01, -5.9640e-02,  2.4974e-01,  4.1748e-01, -1.7519e-01,
        2.0874e-01, -2.0129e-01,  3.2056e-01,  3.6529e-01,  1.1183e-02,
        -1.9010e-01,  4.3239e-01, -3.7275e-02, -2.7211e-01,  5.9640e-02,
        -2.1620e-01,  9.3187e-02, -2.0129e-01,  3.5039e-01,  2.7956e-01,
        -2.0129e-01,  4.1748e-01,  1.6774e-01,  3.3547e-01,  1.1928e-01,
        1.9010e-01, -1.6774e-01,  4.7339e-01,  4.7339e-01,  1.6028e-01,
        -4.5103e-01,  1.6028e-01,  2.3110e-01, -4.7712e-01, -4.3612e-01,
        1.7519e-01, -1.9756e-01, -2.1992e-01, -8.5732e-02,  2.1247e-01,
        -1.8638e-02, -3.2056e-01,  1.1928e-01, -1.3792e-01,
        -1.6464e-01, -1.5435e-01,  1.0804e-01,  6.5856e-01,  6.1225e-01,
        -6.5342e-01, -6.6885e-02,  1.0290e-01,  3.8073e-01, -4.5276e-01,
        -5.8139e-01, -2.7783e-01,  5.0421e-01, -1.6978e-01,  4.8363e-01,
        -4.9906e-01,  2.4696e-01, -4.1160e-01, -5.6595e-02,  6.5856e-01,
        5.0936e-01,  5.4537e-01,  1.5435e-02,  4.6819e-01,  1.2348e-01,
        4.1160e-01,  5.1450e-02,  0.0000e+00, -4.9392e-01,  4.0131e-01,
        -8.2320e-02, -7.7175e-02,  8.2320e-02, -4.6305e-01,  6.5856e-01,
        3.7044e-01,  4.5276e-01,  5.6595e-01,  9.7755e-02,  5.1964e-01,
        -4.5790e-01, -5.0421e-01,  8.2320e-02,  5.7624e-01,  3.3443e-01,
        -6.3798e-01,  5.7109e-01, -1.1834e-01, -6.5342e-01, -5.0421e-01,
        7.7175e-02, -1.5949e-01, -5.0936e-01, -4.5276e-01,  6.5342e-01,
        -5.6595e-01, -6.3283e-01,  3.4986e-01, -4.3733e-01,  2.8812e-01,
        -4.9906e-01, -2.0580e-01, -5.1964e-01,  4.1160e-02,
        -6.3000e-02,  3.2256e-01,  4.0320e-02, -1.0080e-01,  1.0332e-01,
        2.5200e-01,  1.1592e-01, -1.1088e-01, -6.0480e-02, -3.2004e-01,
        -2.4948e-01,  2.4192e-01,  2.4444e-01,  1.0836e-01,  2.5452e-01,
        2.7720e-02,  2.2176e-01, -1.7136e-01,  2.4192e-01,  1.0332e-01,
        -1.0584e-01,  6.3000e-02, -3.0240e-02,  3.1500e-01,  1.8648e-01,
        -1.2600e-01, -1.2852e-01,  1.9908e-01,  3.2256e-01, -3.0996e-01,
        -1.9152e-01, -2.0160e-01, -2.9988e-01, -5.2920e-02, -2.6712e-01,
        1.5624e-01,  1.9908e-01,  5.2920e-02, -7.5600e-03, -1.1844e-01,
        1.9404e-01, -4.7880e-02,  1.9152e-01,  2.5200e-02, -1.4112e-01,
        3.2004e-01, -1.5372e-01,  2.5956e-01, -6.3000e-02, -2.7720e-02,
        6.3000e-02, -3.2004e-01, -3.0240e-02,  3.7800e-02,  1.9656e-01,
        -1.5624e-01, -3.2004e-01,  3.1248e-01,  2.1672e-01,  1.8144e-01,
        5.0400e-02, -7.3080e-02,  3.0240e-02,  3.1500e-01,
        1.5487e-01, -7.9296e-01, -9.9120e-02,  2.4780e-01, -2.5400e-01,
        -6.1950e-01, -2.8497e-01,  2.7258e-01,  1.4868e-01,  7.8676e-01,
        6.1330e-01, -5.9472e-01, -6.0092e-01, -2.6638e-01, -6.2569e-01,
        -6.8145e-02, -5.4516e-01,  4.2126e-01, -5.9472e-01, -2.5400e-01,
        2.6019e-01, -1.5487e-01,  7.4340e-02, -7.7438e-01, -4.5843e-01,
        3.0975e-01,  3.1594e-01, -4.8941e-01, -7.9296e-01,  7.6199e-01,
        4.7082e-01,  4.9560e-01,  7.3720e-01,  1.3010e-01,  6.5667e-01,
        -3.8409e-01, -4.8941e-01, -1.3010e-01,  1.8585e-02,  2.9116e-01,
        -4.7701e-01,  1.1771e-01, -4.7082e-01, -6.1950e-02,  3.4692e-01,
        -7.8676e-01,  3.7789e-01, -6.3809e-01,  1.5487e-01,  6.8145e-02,
        -1.5487e-01,  7.8676e-01,  7.4340e-02, -9.2925e-02, -4.8321e-01,
        3.8409e-01,  7.8676e-01, -7.6818e-01, -5.3277e-01, -4.4604e-01,
        -1.2390e-01,  1.7966e-01, -7.4340e-02, -7.7438e-01,
        8.7150e-03,  3.1500e-03,  1.1130e-02, -9.3450e-03, -8.9250e-03,
        1.2600e-02,  2.1000e-04,  1.3440e-02, -1.3335e-02,  1.1760e-02,
        5.8800e-03, -1.3335e-02,  3.0450e-03,  6.9300e-03,  3.6750e-03,
        1.3440e-02,  1.0500e-04, -1.7850e-03, -1.0500e-04,  1.3440e-02,
        1.3335e-02, -1.3230e-02, -5.8800e-03,  1.1550e-03, -8.0850e-03,
        -2.2050e-03,  1.3440e-02, -1.0920e-02, -9.2400e-03,  4.9350e-03,
        -7.9800e-03,  1.3440e-02, -3.1500e-04, -1.4700e-03, -1.1235e-02,
        -9.6600e-03,  1.0710e-02,  1.2075e-02, -3.5700e-03, -1.1025e-02,
        -1.3335e-02, -9.8700e-03,  9.9750e-03, -5.2500e-04, -1.1445e-02,
        5.9850e-03, -1.3335e-02, -5.9850e-03, -6.3000e-03,  8.6100e-03,
        -3.8850e-03,  1.2180e-02,  1.2285e-02,  1.1340e-02,  4.2000e-03,
        9.1350e-03,  1.3440e-02,  1.2180e-02,  8.5050e-03, -1.1130e-02,
        -1.2915e-02,  2.4150e-03,  8.6100e-03, -5.4600e-03
    };

    sparse::quantized_grouped_sparse_linear_vectorized_parallel_forward(B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64, O);

    for (int i = 0; i < 320; i++) {
        ASSERT_THAT(O[i], testing::FloatNear(expected_O[i], 0.05f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearBackward1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale[1] = {0.0065};
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    // TODO: Use dithered quantization output here
    int8_t dLdO[20] = {
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    };
    float dLdO_scale[1] = {5.0f};
    float dLdX[16] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
    };
    float expected_dLdX[16] = {
        -3.6750, -3.6750, -3.6750, -3.6750,
        2.6625, 2.6625, 2.6625, 2.6625,
        2.6250, 2.6250, 2.6250, 2.6250,
        -0.0750, -0.0750, -0.0750, -0.0750
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {-8.06, -0.8775, 2.6325, 2.6325, -5.135};

    sparse::quantized_grouped_sparse_linear_vectorized_backward(
        B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64,
        dLdO, dLdO_scale, 64, dLdX, dLdW_val
    );

    for (int i = 0; i < 16; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.01f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearBackwardParallel1) {
    int B = 4;
    int M = 4;
    int N = 5;
    int8_t X[16] = {
        -69, -128,  76, 94,
        -128, -118, 55, -57,
        114, -26, -105, 98,
        -33, -128, 13, -10
    };
    float X_scale[1] = {0.0065};
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    // TODO: Use dithered quantization output here
    int8_t dLdO[20] = {
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    };
    float dLdO_scale[1] = {5.0f};
    float dLdX[16] = {
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,
    };
    float expected_dLdX[16] = {
        -3.6750, -3.6750, -3.6750, -3.6750,
        2.6625, 2.6625, 2.6625, 2.6625,
        2.6250, 2.6250, 2.6250, 2.6250,
        -0.0750, -0.0750, -0.0750, -0.0750
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {-8.06, -0.8775, 2.6325, 2.6325, -5.135};

    sparse::quantized_grouped_sparse_linear_vectorized_parallel_backward(
        B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64,
        dLdO, dLdO_scale, 64, dLdX, dLdW_val
    );

    for (int i = 0; i < 16; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.01f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], 0.01f));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearBackward2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32,   30,  -21, -128, -119,  127,   13,  -20,  -75,   88,  113,   54,
        -98,   33,  -95,   97,  -48,   80,   11, -128, -100, -107,   -3,  -91,
        -24,  -80,  -10,    0,   96,  -78,   16,   15,  -16,   90, -128,  -72,
        -88, -110,  -19, -101,   89,   98,  -16, -112,  -65,  125, -111,   23,
        127,   98,  -15,   31,  100,   88, -127,  110,  123,  -68,   85,  -56,
        97,   40,  101,   -8,

        90,  -35,  -32, -123,   58,  -86,   40, -128,   37,  -86,   60,    5,
        123, -128,  121,  -19,  -93,  -14,  -69,    3,   49,  -18,   73,  122,
        -51,   61,  -58,   93,  106,    4,  -56,  126,  -11,  -79,   17,  -63,
        27,  -59,  102,   81,  -59,  121,   49,   97,   35,   55,  -48,  127,
        127,   46, -128,   47,   67, -128, -126,   51,  -57,  -64,  -25,   62,
        -6,  -93,   35,  -40,

        24, -125,  -15,   38,  -39,  -96,  -44,   42,   23,  126,   95,  -92,
        -93,  -42,  -97,  -11,  -84,   65,  -92,  -39,   40,  -24,   11, -119,
        -70,   48,   49,  -76, -128,  118,   73,   77,  114,   20,  101,  -59,
        -75,  -20,    2,   45,  -74,   18,  -73,   -9,   54, -122,   58,  -98,
        24,   10,  -24,  127,   12,  -14,  -75,   59,  127, -118,  -83,  -69,
        -19,   27,  -12, -119,

        -88,  -32, -113,   95,   91, -128,   -3, -128,  127, -119,  -59,  127,
        -31,  -71,  -37, -128,   -1,   18,    1, -128, -128,  127,   60,  -11,
        83,   23, -128,  111,   94,  -51,   81, -128,    3,   15,  115,   99,
        -109, -123,   36,  112,  127,  100, -102,    6,  116,  -61,  127,   61,
        65,  -88,   40, -124, -125, -115,  -43,  -93, -128, -124,  -86,  113,
        127,  -25,  -88,   56
    };
    float X_scale[4] = {0.0070, 0.0065, 0.0074, 0.0066};//0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    int8_t dLdO[320] = {
        -33, -21, -31,  49, -25,  45,  30, -38,  50,  24, -32, -48,  37,  23,
        -54,  53,   6,  17, -24, -15, -30,   8, -29, -17,  42,  37,  47,  17,
        45,  48,  52, -25,  47, -43,  28,  17, -32,   8,  16,   4, -40,  43,
        -50, -31,  10,  41, -34, -47,  -8,   8,   9, -11,  -6,  53, -37,  27,
        -20,  51, -43,   8, -32,  -1,  40,   5,

        -8, -17,   5,  53,  13, -14, -54,  24,  53, -28,  15,  25,  19,   8,
        -54, -47, -20,  29,  29,  31, -38,  31,  51,  41, -39, -51,  37, -42,
        -31, -44,  48, -10, -30, -28,  -6, -48,  38,  11, -46, -25,  17, -20,
        -47,  37,   9,  13,  52,  48,  13, -38,  14,  -4, -19, -22, -20,  25,
        30,  41, -43,  -3,  52, -28,  -1, -48,

        -27,  -2,  34, -39, -38, -49,  51,   0, -20,  35, -47, -34,   0, -40,
        47, -11,   4, -39,  16,  28,  46,  33, -16,  14, -14, -35,  29, -48,
        37,  50,  29,  37, -49,  34, -23, -28,  42,  47,  32,  19,  15, -38,
        -39, -55,  -8, -50,  -6, -31,  -2, -13,   6,  -3,  47, -21,  53,  -9,
        -4, -41,   9, -24, -33, -39,  46, -55,

        -30,  52, -27, -31,   6,  17,  49, -36, -37, -28, -33,   6,  14,   3,
        -8,  29, -21,  21, -40,  35,  13,  42, -44, -49,  46, -41,   4, -29,
        27,  21,  58, -20, -46, -41, -55, -52, -33,  17, -37,  -2,  10,  23,
        -11,  26,  45,  28, -45,  55,  24, -39,   5, -52,  -3,  57, -16,  20,
        7, -13, -20, -56,  43,  -8,  48, -12,

        34,  27,  11,   4,  41,  17,   8, -51,  -4,   6,  50,  29,  46, -52,
        -18,  32, -18, -21, -38,  29,  43, -37,  32,  52,  45, -11, -48, -15,
        -19,  -8,  52, -37,  -2, -43,  35, -33,  29, -10,  38,  54,  42,  27,
        -30, -34, -11,  15,  -9, -51,   3,  46, -43,  53,  49,  49,  14, -27,
        -35, -12,  12,  33, -21, -49, -35,  -6
    };
    float dLdO_scale[5] = {0.0185f, 0.0186f, 0.0179f, 0.0169f, 0.0181f};
    float dLdX[256];
    for (int i = 0; i < 256; i++) {
        dLdX[i] = 0.0f;
    }
    float expected_dLdX[256] = {
        1.0620e-01,  2.2566e-01, -6.6372e-02, -7.1682e-01, -1.8584e-01,
        1.8584e-01,  7.3009e-01, -3.3186e-01, -7.3009e-01,  3.8496e-01,
        -1.9912e-01, -3.4513e-01, -2.6549e-01, -1.0620e-01,  7.3009e-01,
        6.2390e-01,  2.7876e-01, -3.8496e-01, -3.8496e-01, -4.1151e-01,
        5.1770e-01, -4.2478e-01, -7.0354e-01, -5.7080e-01,  5.4425e-01,
        6.9027e-01, -5.0443e-01,  5.7080e-01,  4.1151e-01,  6.1062e-01,
        -6.6372e-01,  1.3274e-01,  4.1151e-01,  3.8496e-01,  7.9646e-02,
        6.6372e-01, -5.3098e-01, -1.5929e-01,  6.2390e-01,  3.4513e-01,
        -2.3894e-01,  2.7876e-01,  6.3717e-01, -5.0443e-01, -1.3274e-01,
        -1.7257e-01, -7.1682e-01, -6.5045e-01, -1.7257e-01,  5.3098e-01,
        -1.8584e-01,  5.3098e-02,  2.6549e-01,  3.1859e-01,  2.7876e-01,
        -3.3186e-01, -4.1151e-01, -5.5752e-01,  5.8407e-01,  3.9823e-02,
        -7.1682e-01,  3.8496e-01,  1.3274e-02,  6.6372e-01,

        -3.1737e-01, -2.1158e-01, -2.9813e-01,  4.9048e-01, -2.4043e-01,
        4.4239e-01,  2.9813e-01, -3.7507e-01,  5.0009e-01,  2.4043e-01,
        -3.0775e-01, -4.7124e-01,  3.6545e-01,  2.2119e-01, -5.2894e-01,
        5.1933e-01,  5.7703e-02,  1.7311e-01, -2.3081e-01, -1.4426e-01,
        -2.8851e-01,  6.7320e-02, -2.7890e-01, -1.7311e-01,  4.1354e-01,
        3.6545e-01,  4.6162e-01,  1.6349e-01,  4.4239e-01,  4.6162e-01,
        5.0971e-01, -2.5005e-01,  4.6162e-01, -4.2316e-01,  2.7890e-01,
        1.6349e-01, -3.1737e-01,  8.6554e-02,  1.6349e-01,  3.8469e-02,
        -3.9430e-01,  4.3277e-01, -4.9048e-01, -2.9813e-01,  9.6172e-02,
        4.0392e-01, -3.2698e-01, -4.6162e-01, -7.6937e-02,  8.6554e-02,
        8.6554e-02, -1.0579e-01, -5.7703e-02,  5.1933e-01, -3.6545e-01,
        2.5966e-01, -2.0196e-01,  5.0009e-01, -4.2316e-01,  8.6554e-02,
        -3.1737e-01, -9.6172e-03,  3.9430e-01,  3.8469e-02,

        -2.7199e-01,  7.8671e-01, -6.2065e-01, -2.0995e-01,  3.2048e-01,
        5.6782e-01,  3.8767e-01, -5.4344e-01, -4.2939e-01, -6.3663e-01,
        -1.8991e-01,  3.1696e-01,  2.1727e-01,  3.0802e-01, -4.1747e-01,
        5.1906e-01, -3.2969e-01,  5.7324e-01, -7.1140e-01,  3.5191e-01,
        -1.0728e-01,  4.0880e-01, -5.5129e-01, -8.1028e-01,  7.7831e-01,
        -3.7981e-01, -1.1812e-01, -1.1947e-01,  1.6552e-01, -1.4900e-02,
        6.9054e-01, -5.4425e-01, -3.9119e-01, -8.4441e-01, -6.8810e-01,
        -6.0114e-01, -7.6206e-01, -4.3345e-02, -7.6098e-01, -1.4900e-01,
        4.6325e-02,  5.9220e-01,  8.7232e-02,  7.3470e-01,  7.3930e-01,
        7.5664e-01, -6.3229e-01,  1.0232e+00,  3.7412e-01, -5.0036e-01,
        4.7409e-02, -7.4770e-01, -3.3755e-01,  9.7716e-01, -5.7784e-01,
        3.6220e-01,  1.2191e-01,  6.8268e-02, -3.4622e-01, -6.8160e-01,
        8.6988e-01,  1.4819e-01,  4.2668e-01,  1.7528e-01,

        -9.2108e-03, -7.5854e-03, -2.9800e-03, -1.0836e-03, -1.1107e-02,
        -4.6054e-03, -2.4382e-03,  1.4358e-02,  1.0836e-03, -1.6254e-03,
        -1.3816e-02, -8.1272e-03, -1.2462e-02,  1.4358e-02,  5.1472e-03,
        -8.9399e-03,  4.8763e-03,  5.6890e-03,  1.0294e-02, -7.8563e-03,
        -1.1649e-02,  1.0294e-02, -8.6690e-03, -1.4358e-02, -1.2462e-02,
        2.9800e-03,  1.3003e-02,  4.0636e-03,  5.1472e-03,  2.4382e-03,
        -1.4087e-02,  1.0024e-02,  5.4181e-04,  1.1649e-02, -9.4817e-03,
        9.2108e-03, -8.1272e-03,  2.4382e-03, -1.0294e-02, -1.4629e-02,
        -1.1378e-02, -7.3145e-03,  8.1272e-03,  8.9399e-03,  2.9800e-03,
        -4.0636e-03,  2.7091e-03,  1.3816e-02, -8.1272e-04, -1.2462e-02,
        1.1920e-02, -1.4358e-02, -1.3274e-02, -1.3274e-02, -3.7927e-03,
        7.3145e-03,  9.4817e-03,  3.5218e-03, -3.2509e-03, -9.2108e-03,
        5.6890e-03,  1.3545e-02,  9.7526e-03,  1.6254e-03
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {
        -2.6445, -2.6210, 1.7794, -3.0625, 0.2901
    };

    sparse::quantized_grouped_sparse_linear_vectorized_backward(
        B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64,
        dLdO, dLdO_scale, 64, dLdX, dLdW_val
    );

    // TODO: Check the results of vectorized loop and scalar loop
    for (int i = 0; i < 256; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.05f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], std::abs(expected_dLdW[i]) * 0.07));
    }
}

TEST(Test_Sparse, QuantizeGroupedSparseLinearBackwardParallel2) {
    int B = 64;
    int M = 4;
    int N = 5;
    int8_t X[256] = {
        32,   30,  -21, -128, -119,  127,   13,  -20,  -75,   88,  113,   54,
        -98,   33,  -95,   97,  -48,   80,   11, -128, -100, -107,   -3,  -91,
        -24,  -80,  -10,    0,   96,  -78,   16,   15,  -16,   90, -128,  -72,
        -88, -110,  -19, -101,   89,   98,  -16, -112,  -65,  125, -111,   23,
        127,   98,  -15,   31,  100,   88, -127,  110,  123,  -68,   85,  -56,
        97,   40,  101,   -8,

        90,  -35,  -32, -123,   58,  -86,   40, -128,   37,  -86,   60,    5,
        123, -128,  121,  -19,  -93,  -14,  -69,    3,   49,  -18,   73,  122,
        -51,   61,  -58,   93,  106,    4,  -56,  126,  -11,  -79,   17,  -63,
        27,  -59,  102,   81,  -59,  121,   49,   97,   35,   55,  -48,  127,
        127,   46, -128,   47,   67, -128, -126,   51,  -57,  -64,  -25,   62,
        -6,  -93,   35,  -40,

        24, -125,  -15,   38,  -39,  -96,  -44,   42,   23,  126,   95,  -92,
        -93,  -42,  -97,  -11,  -84,   65,  -92,  -39,   40,  -24,   11, -119,
        -70,   48,   49,  -76, -128,  118,   73,   77,  114,   20,  101,  -59,
        -75,  -20,    2,   45,  -74,   18,  -73,   -9,   54, -122,   58,  -98,
        24,   10,  -24,  127,   12,  -14,  -75,   59,  127, -118,  -83,  -69,
        -19,   27,  -12, -119,

        -88,  -32, -113,   95,   91, -128,   -3, -128,  127, -119,  -59,  127,
        -31,  -71,  -37, -128,   -1,   18,    1, -128, -128,  127,   60,  -11,
        83,   23, -128,  111,   94,  -51,   81, -128,    3,   15,  115,   99,
        -109, -123,   36,  112,  127,  100, -102,    6,  116,  -61,  127,   61,
        65,  -88,   40, -124, -125, -115,  -43,  -93, -128, -124,  -86,  113,
        127,  -25,  -88,   56
    };
    float X_scale[4] = {0.0070, 0.0065, 0.0074, 0.0066};//0.0065;
    int W_idx_N[6] = {0, 1, 2, 3, 4, 5};
    int W_idx_M[5] = {1, 0, 2, 2, 3};
    int8_t W_val[5] = {71, -98, -48, 118, -2};
    float W_scale[1] = {0.0075};
    int8_t dLdO[320] = {
        -33, -21, -31,  49, -25,  45,  30, -38,  50,  24, -32, -48,  37,  23,
        -54,  53,   6,  17, -24, -15, -30,   8, -29, -17,  42,  37,  47,  17,
        45,  48,  52, -25,  47, -43,  28,  17, -32,   8,  16,   4, -40,  43,
        -50, -31,  10,  41, -34, -47,  -8,   8,   9, -11,  -6,  53, -37,  27,
        -20,  51, -43,   8, -32,  -1,  40,   5,

        -8, -17,   5,  53,  13, -14, -54,  24,  53, -28,  15,  25,  19,   8,
        -54, -47, -20,  29,  29,  31, -38,  31,  51,  41, -39, -51,  37, -42,
        -31, -44,  48, -10, -30, -28,  -6, -48,  38,  11, -46, -25,  17, -20,
        -47,  37,   9,  13,  52,  48,  13, -38,  14,  -4, -19, -22, -20,  25,
        30,  41, -43,  -3,  52, -28,  -1, -48,

        -27,  -2,  34, -39, -38, -49,  51,   0, -20,  35, -47, -34,   0, -40,
        47, -11,   4, -39,  16,  28,  46,  33, -16,  14, -14, -35,  29, -48,
        37,  50,  29,  37, -49,  34, -23, -28,  42,  47,  32,  19,  15, -38,
        -39, -55,  -8, -50,  -6, -31,  -2, -13,   6,  -3,  47, -21,  53,  -9,
        -4, -41,   9, -24, -33, -39,  46, -55,

        -30,  52, -27, -31,   6,  17,  49, -36, -37, -28, -33,   6,  14,   3,
        -8,  29, -21,  21, -40,  35,  13,  42, -44, -49,  46, -41,   4, -29,
        27,  21,  58, -20, -46, -41, -55, -52, -33,  17, -37,  -2,  10,  23,
        -11,  26,  45,  28, -45,  55,  24, -39,   5, -52,  -3,  57, -16,  20,
        7, -13, -20, -56,  43,  -8,  48, -12,

        34,  27,  11,   4,  41,  17,   8, -51,  -4,   6,  50,  29,  46, -52,
        -18,  32, -18, -21, -38,  29,  43, -37,  32,  52,  45, -11, -48, -15,
        -19,  -8,  52, -37,  -2, -43,  35, -33,  29, -10,  38,  54,  42,  27,
        -30, -34, -11,  15,  -9, -51,   3,  46, -43,  53,  49,  49,  14, -27,
        -35, -12,  12,  33, -21, -49, -35,  -6
    };
    float dLdO_scale[5] = {0.0185f, 0.0186f, 0.0179f, 0.0169f, 0.0181f};
    float dLdX[256];
    for (int i = 0; i < 256; i++) {
        dLdX[i] = 0.0f;
    }
    float expected_dLdX[256] = {
        1.0620e-01,  2.2566e-01, -6.6372e-02, -7.1682e-01, -1.8584e-01,
        1.8584e-01,  7.3009e-01, -3.3186e-01, -7.3009e-01,  3.8496e-01,
        -1.9912e-01, -3.4513e-01, -2.6549e-01, -1.0620e-01,  7.3009e-01,
        6.2390e-01,  2.7876e-01, -3.8496e-01, -3.8496e-01, -4.1151e-01,
        5.1770e-01, -4.2478e-01, -7.0354e-01, -5.7080e-01,  5.4425e-01,
        6.9027e-01, -5.0443e-01,  5.7080e-01,  4.1151e-01,  6.1062e-01,
        -6.6372e-01,  1.3274e-01,  4.1151e-01,  3.8496e-01,  7.9646e-02,
        6.6372e-01, -5.3098e-01, -1.5929e-01,  6.2390e-01,  3.4513e-01,
        -2.3894e-01,  2.7876e-01,  6.3717e-01, -5.0443e-01, -1.3274e-01,
        -1.7257e-01, -7.1682e-01, -6.5045e-01, -1.7257e-01,  5.3098e-01,
        -1.8584e-01,  5.3098e-02,  2.6549e-01,  3.1859e-01,  2.7876e-01,
        -3.3186e-01, -4.1151e-01, -5.5752e-01,  5.8407e-01,  3.9823e-02,
        -7.1682e-01,  3.8496e-01,  1.3274e-02,  6.6372e-01,

        -3.1737e-01, -2.1158e-01, -2.9813e-01,  4.9048e-01, -2.4043e-01,
        4.4239e-01,  2.9813e-01, -3.7507e-01,  5.0009e-01,  2.4043e-01,
        -3.0775e-01, -4.7124e-01,  3.6545e-01,  2.2119e-01, -5.2894e-01,
        5.1933e-01,  5.7703e-02,  1.7311e-01, -2.3081e-01, -1.4426e-01,
        -2.8851e-01,  6.7320e-02, -2.7890e-01, -1.7311e-01,  4.1354e-01,
        3.6545e-01,  4.6162e-01,  1.6349e-01,  4.4239e-01,  4.6162e-01,
        5.0971e-01, -2.5005e-01,  4.6162e-01, -4.2316e-01,  2.7890e-01,
        1.6349e-01, -3.1737e-01,  8.6554e-02,  1.6349e-01,  3.8469e-02,
        -3.9430e-01,  4.3277e-01, -4.9048e-01, -2.9813e-01,  9.6172e-02,
        4.0392e-01, -3.2698e-01, -4.6162e-01, -7.6937e-02,  8.6554e-02,
        8.6554e-02, -1.0579e-01, -5.7703e-02,  5.1933e-01, -3.6545e-01,
        2.5966e-01, -2.0196e-01,  5.0009e-01, -4.2316e-01,  8.6554e-02,
        -3.1737e-01, -9.6172e-03,  3.9430e-01,  3.8469e-02,

        -2.7199e-01,  7.8671e-01, -6.2065e-01, -2.0995e-01,  3.2048e-01,
        5.6782e-01,  3.8767e-01, -5.4344e-01, -4.2939e-01, -6.3663e-01,
        -1.8991e-01,  3.1696e-01,  2.1727e-01,  3.0802e-01, -4.1747e-01,
        5.1906e-01, -3.2969e-01,  5.7324e-01, -7.1140e-01,  3.5191e-01,
        -1.0728e-01,  4.0880e-01, -5.5129e-01, -8.1028e-01,  7.7831e-01,
        -3.7981e-01, -1.1812e-01, -1.1947e-01,  1.6552e-01, -1.4900e-02,
        6.9054e-01, -5.4425e-01, -3.9119e-01, -8.4441e-01, -6.8810e-01,
        -6.0114e-01, -7.6206e-01, -4.3345e-02, -7.6098e-01, -1.4900e-01,
        4.6325e-02,  5.9220e-01,  8.7232e-02,  7.3470e-01,  7.3930e-01,
        7.5664e-01, -6.3229e-01,  1.0232e+00,  3.7412e-01, -5.0036e-01,
        4.7409e-02, -7.4770e-01, -3.3755e-01,  9.7716e-01, -5.7784e-01,
        3.6220e-01,  1.2191e-01,  6.8268e-02, -3.4622e-01, -6.8160e-01,
        8.6988e-01,  1.4819e-01,  4.2668e-01,  1.7528e-01,

        -9.2108e-03, -7.5854e-03, -2.9800e-03, -1.0836e-03, -1.1107e-02,
        -4.6054e-03, -2.4382e-03,  1.4358e-02,  1.0836e-03, -1.6254e-03,
        -1.3816e-02, -8.1272e-03, -1.2462e-02,  1.4358e-02,  5.1472e-03,
        -8.9399e-03,  4.8763e-03,  5.6890e-03,  1.0294e-02, -7.8563e-03,
        -1.1649e-02,  1.0294e-02, -8.6690e-03, -1.4358e-02, -1.2462e-02,
        2.9800e-03,  1.3003e-02,  4.0636e-03,  5.1472e-03,  2.4382e-03,
        -1.4087e-02,  1.0024e-02,  5.4181e-04,  1.1649e-02, -9.4817e-03,
        9.2108e-03, -8.1272e-03,  2.4382e-03, -1.0294e-02, -1.4629e-02,
        -1.1378e-02, -7.3145e-03,  8.1272e-03,  8.9399e-03,  2.9800e-03,
        -4.0636e-03,  2.7091e-03,  1.3816e-02, -8.1272e-04, -1.2462e-02,
        1.1920e-02, -1.4358e-02, -1.3274e-02, -1.3274e-02, -3.7927e-03,
        7.3145e-03,  9.4817e-03,  3.5218e-03, -3.2509e-03, -9.2108e-03,
        5.6890e-03,  1.3545e-02,  9.7526e-03,  1.6254e-03
    };
    float dLdW_val[5] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    float expected_dLdW[5] = {
        -2.6445, -2.6210, 1.7794, -3.0625, 0.2901
    };

    sparse::quantized_grouped_sparse_linear_vectorized_parallel_backward(
        B, M, N, X, X_scale, 64, W_idx_N, W_idx_M, W_val, W_scale, 64,
        dLdO, dLdO_scale, 64, dLdX, dLdW_val
    );

    // TODO: Check the results of vectorized loop and scalar loop
    for (int i = 0; i < 256; i++) {
        ASSERT_THAT(dLdX[i], testing::FloatNear(expected_dLdX[i], 0.05f));
    }

    for (int i = 0; i < 5; i++) {
        ASSERT_THAT(dLdW_val[i], testing::FloatNear(expected_dLdW[i], std::abs(expected_dLdW[i]) * 0.07));
    }
}